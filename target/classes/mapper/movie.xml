<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.movie">
	
	<resultMap id="movieResult" type="movieDTO">
		<result property="movie_id" column="movie_id" />
		<result property="movieNm" column="movieNm" />
		<result property="movieNm_EN" column="movieNm_EN" />
		<result property="movieYear" column="movieYear" />
		<result property="movieGenre" column="movieGenre" />
		<result property="movieNation" column="movieNation" />
		<result property="movieDirector" column="movieDirector" />
		<result property="movieActor" column="movieActor" />
		<result property="movieGrade" column="movieGrade" />
		<result property="showTm" column="showTm" />
		<result property="moviePosterPath" column="moviePosterPath" />
		<result property="movieBackdropPath" column="movieBackdropPath" />
		<result property="movieOverview" column="movieOverview" />
		<result property="movieCd" column="movieCd" />
	</resultMap> 
	
	
	
	
	<!-- 관리자용 전체 영화 조회 -->
	<select id="selectAllmovie" resultMap="movieResult">
      <![CDATA[
         select * 
         from movielist
         order by moviePosterPath, movieCd desc
         limit 10
      ]]>
	</select>
	
	<!-- 영화 추가 (관리자& kobis 검색시 DB에 없을 경우) -->
	<insert id="insertMovie" parameterType="movieDTO" useGeneratedKeys="true" keyProperty="movie_id">
		<![CDATA[
		 insert into movielist(movieNm, movieNm_EN, movieYear, movieGenre, movieNation, movieDirector, movieActor, movieGrade, showTm, moviePosterPath, movieBackdropPath, movieOverview, movieCd) 
		 values(#{movieNm}, #{movieNm_EN}, #{movieYear}, #{movieGenre}, #{movieNation}, #{movieDirector}, #{movieActor},
		 #{movieGrade}, #{showTm}, #{moviePosterPath}, #{movieBackdropPath}, #{movieOverview}, #{movieCd})
		]]>
	</insert>
	
	<!-- Kobis 검색시 이미 등록되어있는 movie_id면 일부 정보 추가업데이트하기 -->
	<update id="updateMovieParts" parameterType="movieDTO">
	  	update movielist
	  	set movieGenre=#{movieGenre}, movieNation=#{movieNation}, movieDirector=#{movieDirector}, movieActor=#{movieActor}, movieGrade=#{movieGrade}, showTm=#{showTm}, moviePosterPath=#{moviePosterPath}, movieBackdropPath=#{movieBackdropPath}, movieOverview=#{movieOverview}, movieCd=#{movieCd}
	  	where movie_id=#{movie_id}
  	</update>
	
	
	<!-- 수정을 위해 dto 가져오기-->
	<select id="selectOneMovie" resultMap="movieResult" parameterType="String">
      <![CDATA[
         select * 
         from movielist
         where movie_id=#{movie_id} 
      ]]>
	</select>
	
	<!-- kobis 영화코드로 db 정보 가져오기 (나중에 삭제 각) -->
	<select id="selectMovieByCd" parameterType="String" resultMap="movieResult" >
		select * 
		from movielist 
		where movieCd=#{movieCd}
	</select>
	
	<!-- Kobis로 검색했을 때 기존 DB에 등록된 movie_id와 일치하는 영화가 있는지 확인(영화 제목, 연도로 찾기) -->
	<select id="selectMovieIDByNmYear" parameterType="movieDTO" resultType="Integer">
		select movie_id 
		from movielist 
		where movieNm=#{movieNm} and movieYear=#{movieYear}
	</select>
	
	<!-- Kobis 영화 코드로 DB의 movie_id 찾기 (이미 DB에 등록된 영화 정보인지 확인) -->
	<select id="getMovieidBymovieCd" parameterType="String" resultType="Integer">
		select movie_id 
		from movielist 
		where movieCd=#{movieCd};
	</select>
	
	<!-- 관리자용 Form에서 수정 -->
	<update id="updateMovie" parameterType="movieDTO">
	  	update movielist
	  	set movieYear=#{movieYear}, movieGenre=#{movieGenre}, movieNation=#{movieNation}, movieDirector=#{movieDirector}, movieActor=#{movieActor}, movieGrade=#{movieGrade}, showTm=#{showTm}, moviePosterPath=#{moviePosterPath}, movieBackdropPath=#{movieBackdropPath}, movieOverview=#{movieOverview}, movieCd=#{movieCd}
	  	where movie_id=#{movie_id}
  	</update>
	
	<!-- 관리자용 영화 정보 삭제하기 -->
	 <delete id="deleteMovie"  parameterType="String">
	<![CDATA[
	   delete from movielist
	   where movie_id=#{movie_id}
	]]>      
  	</delete>
    
  	<!-- 관리자용 영화 검색 시작 -->
	<select id="selectAdminSearchMovie" parameterType="hashMap" resultMap="movieResult" >
	    select * 
	    from movielist
	    where 
	    <choose>
	        <when test="searchType!=null and searchType.equals('movie_id')">
	            movie_id like #{keyword}
	        </when>
	        <when test="searchType!=null and searchType.equals('movieNm')">
	            movieNm like #{keyword} '%'
	        </when>
	        <when test="searchType!=null and searchType.equals('movieNm_EN')">
	            movieNm_EN like concat('%', #{keyword}, '%')
	        </when>
	        <when test="searchType!=null and searchType.equals('movieDirector')">
	            movieDirector like concat('%', #{keyword}, '%')
	        </when>
	        <otherwise>
	            1=0 <!-- null이면 반환 x -->
	        </otherwise>
	    </choose>
	    order by movieYear
	    limit #{displayPost}, #{postNum}
	</select>
	<!-- 관리자용 영화 검색 끝 -->
	<!-- 총 영화 갯수  -->
	<select id="countMovie" resultType="int">
		select count(movie_id) from movielist
	</select>
	<!-- 한 페이지만큼만 가져오기 -->
	<select id="selectPageArticle" parameterType="hashMap" resultMap="movieResult">
		<![CDATA[
		select * from movielist 
		order by moviePosterPath limit #{displayPost}, #{postNum}]]>
	</select>
	<!--  검색으로 찾은 게시글 수  -->
	<select id="countSearchMovieByKeyword" parameterType="hashMap" resultType="int">
		<![CDATA[select count(movie_id) from movielist]]>
		<where>
			<choose>
				<when test="searchType!=null and searchType.equals('movie_id')">
	            movie_id like #{keyword}
		        </when>
		        <when test="searchType!=null and searchType.equals('movieNm')">
		            movieNm like #{keyword} '%'
		        </when>
		        <when test="searchType!=null and searchType.equals('movieNm_EN')">
		            movieNm_EN like concat('%', #{keyword}, '%')
		        </when>
		        <when test="searchType!=null and searchType.equals('movieDirector')">
		            movieDirector like concat('%', #{keyword}, '%')
		        </when>
				<otherwise>
					1=0
				</otherwise>
			</choose>
		</where>
		order by movieYear
	</select>
	
	
	<!-- DB 내부 검색 -->
	<select id="userSearchMovie" parameterType="hashMap" resultMap="movieResult">
		SELECT * FROM movielist WHERE movieNm LIKE CONCAT('%', #{keyword}, '%')
		UNION
		SELECT * FROM movielist WHERE movieDirector LIKE CONCAT('%', #{keyword}, '%')
		UNION
		SELECT * FROM movielist WHERE movieActor LIKE CONCAT('%', #{keyword}, '%')
		limit #{displayPost}, #{postNum}
	</select>
	<!-- DB 검색 결과 개수 -->
		<select id="countUserSearchMovie" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) FROM movielist
	    WHERE movieNm LIKE CONCAT('%', #{keyword}, '%')
	    OR movieDirector LIKE CONCAT('%', #{keyword}, '%')
	    OR movieActor LIKE CONCAT('%', #{keyword}, '%')
	</select>
	
	
	<!-- 장르 검색하기 (태그?) -->
	<select id="selectMovieGenre" parameterType="hashMap" resultMap="movieResult">
		select * from movielist where movieGenre 
		like CONCAT('%', #{keyword}, '%') 
		limit #{displayPost}, #{postNum}
	</select>
    <select id="getGenreTotal" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM movielist where movieGenre like CONCAT('%', #{keyword}, '%')
	</select>
	
	<!-- 연도별 영화 -->
	<select id="selectMovieByYear" parameterType="hashMap" resultMap="movieResult">
		select * from movielist where movieYear=#{keyword} limit #{displayPost}, #{postNum}
	</select>
	<select id="selectMovieByYearTotal" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM movielist where movieYear=#{year} 
	</select>
	
	<!-- 영화 보고싶어요 -->
	<insert id="insertWish" parameterType="hashMap">
		insert into movielike values(#{movie_id}, #{member_id})
	</insert>	
	<delete id="deleteWish" parameterType="hashMap">
		delete from movielike where movie_id=#{movie_id} and member_id=#{member_id}
	</delete>
	<select id="wishCheck" resultType="int">
		select count(*) from movielike where movie_id=#{movie_id} and member_id=#{member_id}
	</select>
	 <select id="countWishMovie" parameterType = "String" resultType="int">
 		select count(*) from movielike where member_id=#{member_id};
 	</select>
	 <select id="selectWishMovie" parameterType = "String" resultMap="movieResult">
 		SELECT A.movie_id, B.moviePosterPath, B.movieNm, B.movieYear, B.movieDirector
		FROM movielike A 
		JOIN movielist B
		ON A.movie_id = B.movie_id
        where A.member_id=#{member_id}
 	</select>
	
	
	
	<!--  컬렉션 -->
	<!-- 해리포터 컬렉션 -->
	<select id="collection_harrypotter" resultMap="movieResult">
		SELECT A.movie_id, B.moviePosterPath, B.movieNm, B.movieYear, B.movieDirector
		FROM collection_harrypotter A
		JOIN movielist B
		ON A.movie_id = B.movie_id
		order by movieYear
	</select>
	
	<!-- 마블 컬렉션 -->
	<select id="collection_marvel" resultMap="movieResult">
		SELECT A.movie_id, B.moviePosterPath, B.movieNm, B.movieYear, B.movieDirector
		FROM collection_marvel A
		JOIN movielist B
		ON A.movie_id = B.movie_id
		order by movieYear
	</select>
	
	<!-- 한국 판타지 컬렉션 -->
	<select id="collection_krFantagy" resultMap="movieResult">
		SELECT A.movie_id, B.moviePosterPath, B.movieNm, B.movieYear, B.movieDirector
		FROM collection_krfantagy A
		JOIN movielist B
		ON A.movie_id = B.movie_id
	</select>
	
	<!-- 한국 천만 관객 영화 컬렉션 -->
	<select id="collection_tenMillion" resultMap="movieResult">
		SELECT A.movie_id, B.moviePosterPath, B.movieNm, B.movieYear, B.movieDirector
		FROM collection_tenmillion A
		JOIN movielist B
		ON A.movie_id = B.movie_id
	</select>

</mapper>